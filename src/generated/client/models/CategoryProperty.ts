/* tslint:disable */
/* eslint-disable */
/**
 * CityLoops API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CategoryPropertyInputType,
    CategoryPropertyInputTypeFromJSON,
    CategoryPropertyInputTypeFromJSONTyped,
    CategoryPropertyInputTypeToJSON,
} from './';

/**
 * Category property object
 * @export
 * @interface CategoryProperty
 */
export interface CategoryProperty {
    /**
     * Property name
     * @type {string}
     * @memberof CategoryProperty
     */
    name: string;
    /**
     * 
     * @type {CategoryPropertyInputType}
     * @memberof CategoryProperty
     */
    type: CategoryPropertyInputType;
    /**
     * Is this property required
     * @type {boolean}
     * @memberof CategoryProperty
     */
    required: boolean;
    /**
     * Info text for UI
     * @type {string}
     * @memberof CategoryProperty
     */
    infoText?: string;
    /**
     * Default value
     * @type {string}
     * @memberof CategoryProperty
     */
    defaultValue?: string;
    /**
     * Property unit if type is number
     * @type {string}
     * @memberof CategoryProperty
     */
    unit?: string;
}

export function CategoryPropertyFromJSON(json: any): CategoryProperty {
    return CategoryPropertyFromJSONTyped(json, false);
}

export function CategoryPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': CategoryPropertyInputTypeFromJSON(json['type']),
        'required': json['required'],
        'infoText': !exists(json, 'infoText') ? undefined : json['infoText'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
    };
}

export function CategoryPropertyToJSON(value?: CategoryProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': CategoryPropertyInputTypeToJSON(value.type),
        'required': value.required,
        'infoText': value.infoText,
        'defaultValue': value.defaultValue,
        'unit': value.unit,
    };
}


