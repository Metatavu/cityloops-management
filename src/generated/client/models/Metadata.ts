/* tslint:disable */
/* eslint-disable */
/**
 * CityLoops API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Certificates,
    CertificatesFromJSON,
    CertificatesFromJSONTyped,
    CertificatesToJSON,
    Condition,
    ConditionFromJSON,
    ConditionFromJSONTyped,
    ConditionToJSON,
    Coordinates,
    CoordinatesFromJSON,
    CoordinatesFromJSONTyped,
    CoordinatesToJSON,
    Measurements,
    MeasurementsFromJSON,
    MeasurementsFromJSONTyped,
    MeasurementsToJSON,
    Volume,
    VolumeFromJSON,
    VolumeFromJSONTyped,
    VolumeToJSON,
} from './';

/**
 * Items metadata/non-required information
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * 
     * @type {number}
     * @memberof Metadata
     */
    amount?: number;
    /**
     * 
     * @type {Coordinates}
     * @memberof Metadata
     */
    coordinates?: Coordinates;
    /**
     * Item price
     * @type {number}
     * @memberof Metadata
     */
    price?: number;
    /**
     * Price unit. For example €, €/m, €/m3
     * @type {string}
     * @memberof Metadata
     */
    priceUnit?: string;
    /**
     * 
     * @type {Condition}
     * @memberof Metadata
     */
    condition?: Condition;
    /**
     * 
     * @type {Measurements}
     * @memberof Metadata
     */
    measurements?: Measurements;
    /**
     * 
     * @type {Volume}
     * @memberof Metadata
     */
    volume?: Volume;
    /**
     * 
     * @type {Certificates}
     * @memberof Metadata
     */
    certificates?: Certificates;
    /**
     * Additional info for item
     * @type {string}
     * @memberof Metadata
     */
    additionalInfo?: string;
}

export function MetadataFromJSON(json: any): Metadata {
    return MetadataFromJSONTyped(json, false);
}

export function MetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): Metadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'coordinates': !exists(json, 'coordinates') ? undefined : CoordinatesFromJSON(json['coordinates']),
        'price': !exists(json, 'price') ? undefined : json['price'],
        'priceUnit': !exists(json, 'priceUnit') ? undefined : json['priceUnit'],
        'condition': !exists(json, 'condition') ? undefined : ConditionFromJSON(json['condition']),
        'measurements': !exists(json, 'measurements') ? undefined : MeasurementsFromJSON(json['measurements']),
        'volume': !exists(json, 'volume') ? undefined : VolumeFromJSON(json['volume']),
        'certificates': !exists(json, 'certificates') ? undefined : CertificatesFromJSON(json['certificates']),
        'additionalInfo': !exists(json, 'additionalInfo') ? undefined : json['additionalInfo'],
    };
}

export function MetadataToJSON(value?: Metadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'coordinates': CoordinatesToJSON(value.coordinates),
        'price': value.price,
        'priceUnit': value.priceUnit,
        'condition': ConditionToJSON(value.condition),
        'measurements': MeasurementsToJSON(value.measurements),
        'volume': VolumeToJSON(value.volume),
        'certificates': CertificatesToJSON(value.certificates),
        'additionalInfo': value.additionalInfo,
    };
}


